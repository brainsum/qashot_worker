version: "3.7"
services:
  frontend:
    build:
      context: ./frontend
    command: ["nodemon", "index.js"]
    environment:
    - "NODE_ENV=development"
    - "DEBUG='express:*'"
    volumes:
    - ./frontend:/home/node/app
    restart: "no"

  result_queue:
    build:
      context: ./result_queue
    command: ["nodemon", "index.js"]
    environment:
    - "NODE_ENV=development"
    - "DEBUG='express:*'"
    - "PROJECT_ENVIRONMENT=development"
    volumes:
    - ./result_queue:/home/node/app
    restart: "no"

  backstopjs_worker_chrome:
    build:
      context: ./backstopjs_worker
      dockerfile: Dockerfile-chrome
    command: ["nodemon", "index.js"]
    environment:
    - "NODE_ENV=development"
    - "DEBUG='express:*'"
    volumes:
    - ./backstopjs_worker:/home/node/app
    restart: "no"

  backstopjs_worker_firefox:
    build:
      context: ./backstopjs_worker
      dockerfile: Dockerfile-firefox
    command: ["nodemon", "index.js"]
    environment:
    - "NODE_ENV=development"
    - "DEBUG='express:*'"
    volumes:
    - ./backstopjs_worker:/home/node/app
    restart: "no"

  backstopjs_worker_phantomjs:
    build:
      context: ./backstopjs_worker
      dockerfile: Dockerfile-phantomjs
    command: ["nodemon", "index.js"]
    environment:
    - "NODE_ENV=development"
    - "DEBUG='express:*'"
    volumes:
    - ./backstopjs_worker:/home/node/app
    restart: "no"

  portainer:
    image: portainer/portainer
    command: --no-auth -H unix:///var/run/docker.sock
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    labels:
    - "traefik.backend=portainer"
    - "traefik.port=9000"
    - "traefik.frontend.rule=Host:portainer.${PROJECT_BASE_URL}"
    restart: "no"
    networks:
    - monitoring

  internal_rabbitmq:
    restart: "no"

  result_db:
    restart: "no"

  traefik:
    restart: "no"
    ports:
    - "8080:8080" # The Web UI (enabled by --api)
    labels:
    - "traefik.port=8080"

  prometheus:
    restart: "no"

  grafana:
    restart: "no"

  cadvisor:
    restart: "no"

  node_exporter:
    restart: "no"

  alertmanager:
    restart: "no"

  mailhog:
    image: mailhog/mailhog:v1.0.0
    container_name: "${PROJECT_NAME}_mailhog"
    restart: "no"
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.port=8025"
      - "traefik.backend=mailhog"
      - "traefik.frontend.rule=Host:mailhog.${PROJECT_BASE_URL}"
      - "traefik.docker.network=${PROJECT_NAME}_monitoring"

  mail_server:
    restart: "no"
