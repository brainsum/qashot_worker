version: "3.7"
services:
  # Internal only.
  backstopjs_worker_chrome:
    image: brainsum/qashot_worker_backstopjs_chrome:0.2.11
    environment:
    - "NODE_ENV=production"
    - "WORKER_BROWSER=chrome"
    - "WORKER_ENGINE=puppeteer"
    - "INTERNAL_RABBITMQ_URL=amqp://user:bitnami@internal_rabbitmq"
    - "JWT_SECRET_KEY=${JWT_SECRET_KEY}"
    depends_on:
    - frontend
    - internal_rabbitmq
    restart: on-failure
    labels:
    - "traefik.backend=backstopjs_worker_chrome"
    - "traefik.frontend.rule=Host:backstopjs-worker-chrome.${PROJECT_BASE_URL}"
    - "traefik.port=8080"
    - "traefik.backend.loadbalancer.method=drr"
    - "traefik.enable=false"
    - "traefik.docker.network=internal"
    networks:
    - internal
    volumes:
      - chrome_runtime:/home/node/app/runtime/chrome
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 5

  backstopjs_worker_firefox:
    image: brainsum/qashot_worker_backstopjs_firefox:0.1.0
    environment:
    - "NODE_ENV=production"
    - "WORKER_BROWSER=firefox"
    - "WORKER_ENGINE=slimerjs"
    - "INTERNAL_RABBITMQ_URL=amqp://user:bitnami@internal_rabbitmq"
    - "JWT_SECRET_KEY=${JWT_SECRET_KEY}"
    depends_on:
    - frontend
    - internal_rabbitmq
    restart: on-failure
    labels:
    - "traefik.backend=backstopjs_worker_firefox"
    - "traefik.frontend.rule=Host:backstopjs-worker-firefox.${PROJECT_BASE_URL}"
    - "traefik.port=8080"
    - "traefik.backend.loadbalancer.method=drr"
    - "traefik.enable=false"
    - "traefik.docker.network=internal"
    networks:
    - internal
    volumes:
    - firefox_runtime:/home/node/app/runtime/firefox
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 5

  backstopjs_worker_phantomjs:
    image: brainsum/qashot_worker_backstopjs_phantomjs:0.1.0
    environment:
    - "NODE_ENV=production"
    - "WORKER_BROWSER=phantomjs"
    - "WORKER_ENGINE=casper"
    - "INTERNAL_RABBITMQ_URL=amqp://user:bitnami@internal_rabbitmq"
    - "JWT_SECRET_KEY=${JWT_SECRET_KEY}"
    depends_on:
    - frontend
    - internal_rabbitmq
    restart: on-failure
    labels:
    - "traefik.backend=backstopjs_worker_phantomjs"
    - "traefik.frontend.rule=Host:backstopjs-worker-phantomjs.${PROJECT_BASE_URL}"
    - "traefik.port=8080"
    - "traefik.backend.loadbalancer.method=drr"
    - "traefik.enable=false"
    - "traefik.docker.network=internal"
    networks:
    - internal
    volumes:
    - phantomjs_runtime:/home/node/app/runtime/phantomjs
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 5

  internal_rabbitmq:
    image: bitnami/rabbitmq:3.7.7
    environment:
    - "RABBITMQ_USERNAME=user"
    - "RABBITMQ_PASSWORD=bitnami"
    - "RABBITMQ_VHOST=/"
    - "RABBITMQ_NODE_TYPE=stats"
    - "RABBITMQ_NODE_PORT_NUMBER=5672"
    - "RABBITMQ_MANAGER_PORT_NUMBER=15672"
    - "RABBITMQ_DISK_FREE_LIMIT={mem_relative, 1.0}"
    - "RABBITMQ_ULIMIT_NOFILES=65536"
    volumes:
    - ./runtime/internal_rabbitmq_data:/bitnami
    stop_grace_period: 10s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: on-failure
    networks:
    - internal
    labels:
    - "traefik.port=5672"
    - "traefik.enable=false"
    - "traefik.docker.network=internal"
    # - "traefik.backend=internal_rabbitmq"
    # - 'traefik.frontend.rule=Host:internal-rabbitmq.${PROJECT_BASE_URL}'

  # Exposed.
  frontend:
    image: brainsum/qashot_worker_frontend:0.1.3
    environment:
    - "NODE_ENV=production"
    - "INTERNAL_RABBITMQ_URL=amqp://user:bitnami@internal_rabbitmq"
    - "SUPPORTED_BROWSERS=chrome;firefox;phantomjs"
    - "JWT_SECRET_KEY=${JWT_SECRET_KEY}"
    depends_on:
    - internal_rabbitmq
    restart: on-failure
    labels:
    - "traefik.backend=frontend"
    - "traefik.frontend.rule=Host:${PROJECT_BASE_URL}"
    - "traefik.port=8080"
    - "traefik.docker.network=internal,exposed"
    networks:
    - internal
    - exposed
    volumes:
    - type: volume
      source: phantomjs_runtime
      target: /home/node/app/runtime/phantomjs
      read_only: true
      volume:
        nocopy: true

    - type: volume
      source: firefox_runtime
      target: /home/node/app/runtime/firefox
      read_only: true
      volume:
        nocopy: true

    - type: volume
      source: chrome_runtime
      target: /home/node/app/runtime/chrome
      read_only: true
      volume:
        nocopy: true
    stop_grace_period: 10s
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 5

  exposed_rabbitmq:
    image: bitnami/rabbitmq:3.7.7
    environment:
    - "RABBITMQ_USERNAME=user"
    - "RABBITMQ_PASSWORD=bitnami"
    - "RABBITMQ_VHOST=/"
    - "RABBITMQ_NODE_TYPE=stats"
    - "RABBITMQ_NODE_PORT_NUMBER=5672"
    - "RABBITMQ_MANAGER_PORT_NUMBER=15672"
    - "RABBITMQ_DISK_FREE_LIMIT={mem_relative, 1.0}"
    - "RABBITMQ_ULIMIT_NOFILES=65536"
    volumes:
    - ./runtime/exposed_rabbitmq_data:/bitnami
    stop_grace_period: 10s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15682"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: on-failure
    networks:
    - exposed
    - internal
    labels:
    - "traefik.port=5682"
    - "traefik.enable=true"
    - "traefik.backend=exposed_rabbitmq"
    - 'traefik.frontend.rule=Host:exposed-rabbitmq.${PROJECT_BASE_URL}'
    - "traefik.docker.network=internal,exposed"

  # Other.
  traefik:
    image: traefik:v1.6.5-alpine # The official Traefik docker image
    command: ["--api", "--docker"] # Enables the web UI and tells Tr√¶fik to listen to docker
    restart: on-failure
    ports:
    - "80:80"     # The HTTP port
    networks:
    - internal
    - exposed
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events

networks:
  internal: {}
  exposed: {}

volumes:
  chrome_runtime: {}
  phantomjs_runtime: {}
  firefox_runtime: {}
